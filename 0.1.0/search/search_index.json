{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p> \u26a1 Create CRUD routes with lighting speed \u26a1 <sub>A dynamic FastAPI router that automatically creates CRUD routes for your Mongodb models</sub> </p> <p>Documentation: https://pierrod.github.io/fastapi-crudrouter-mongodb-doc/</p> <p>Source Code: https://github.com/pierrod/fastapi-crudrouter-mongodb</p> <p>Credits :</p> <ul> <li> <p>Base projet and idea : awtkns</p> </li> <li> <p>Convert _id to id (for previous versions of Pydantic) : mclate github guide</p> </li> <li> <p>For Pydantic v2 : Stackoverflow</p> </li> </ul> <p>Are you exhausted from constantly rewriting basic CRUD routes? Do you find yourself needing to swiftly prototype features for presentations or hackathons? Well, rejoice! Introducing  fastapi-crudrouter-mongodb, your ultimate solution.</p> <p>As a complement to FastAPI's APIRouter, the FastAPI CRUDRouter for MongoDB \ud83c\udf31 takes care of the heavy lifting for you. It automatically generates and documents your CRUD routes with minimal effort. Simply provide your model and your database connection, and you're good to go!</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install fastapi-crudrouter-mongodb\n---&gt; 100%\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>I will provide more examples in the future, but for now, here is a basic example of how to use the FastAPI CRUDRouter for Mongodb .</p> <pre><code>from typing import Annotated\nfrom fastapi import FastAPI\nfrom fastapi_crudrouter_mongodb import (\n    ObjectId,\n    MongoObjectId,\n    MongoModel,\n    CRUDRouter,\n)\nimport motor.motor_asyncio\n\n# Database connection using motor\nclient = motor.motor_asyncio.AsyncIOMotorClient(\"mongodb://localhost:27017/local\")\n\n# store the database in a global variable\ndb = client.local\n\n# Database Model\nclass UserModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    name: str\n    email: str\n    password: str\n\n\n# Instantiating the CRUDRouter, and a lookup for the messages\n# a User is a model that contains a list of embedded addresses and related to multiple messages\n\nusers_router = CRUDRouter(\n    model=UserModel,\n    db=db,\n    collection_name=\"users\",\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n\n# Instantiating the FastAPI app\napp = FastAPI()\napp.include_router(users_router)\n</code></pre>"},{"location":"#advanced-usage","title":"Advanced Usage","text":"<p>fastapi-crudrouter-mongodb offers several functionalities designed to maximize the benefits of your auto-generated CRUD routes. Here are some key highlights:</p> <ul> <li>Automatic Lookups </li> <li>Automatic Embeds</li> <li>Ability to provide Custom out schema</li> <li>Ability to Disable specific routes</li> <li>Ability to Add custom dependencies to specific routes</li> </ul>"},{"location":"#openapi-support","title":"OpenAPI Support","text":"<p>Automatic OpenAPI Documentation</p> <p>By default, the CRUDRouter automatically documents all generated routes in accordance with the OpenAPI specification.</p> <p>The default routes generated by the CRUDRouter are displayed in the OpenAPI documentation generated by the system.</p> <p></p> <p>The CRUDRouter can dynamically generate comprehensive documentation based on the provided models.</p> <p></p>"},{"location":"examples/minimalist/","title":"Minimalist","text":"<p>This is a minimalist example of a FastAPI application build with FastAPI CRUDRouter for Mongodb .</p> <p>I'm working on differents examples, with some custom router besides the CRUDRouter, and I will add them to the documentation soon .</p> <pre><code>from datetime import datetime\nfrom typing import Optional, Union, Annotated\nfrom fastapi import FastAPI\nfrom fastapi_crudrouter_mongodb import (\n    ObjectId,\n    MongoObjectId,\n    MongoModel,\n    CRUDRouter,\n    CRUDLookup,\n    CRUDEmbed,\n)\nimport motor.motor_asyncio\n\n\n# Database connection using motor\nclient = motor.motor_asyncio.AsyncIOMotorClient(\"mongodb://localhost:27017/local\")\n\n# store the database in a global variable\ndb = client.local\n\n\n# Database Model\nclass MessageModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    message: str\n    user_id: Annotated[ObjectId, MongoObjectId]\n    created_at: str | None = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    updated_at: str | None = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n\nclass AddressModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    street: str\n    city: str\n    state: str\n    zip: str\n\n\nclass UserModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    name: str\n    email: str\n    password: str\n    addresses: Optional[list[AddressModel]] = []\n    messages: Optional[Union[list[MessageModel], MessageModel]] = None\n\n# Model Out -&gt; Schema\nclass UserModelOut(MongoModel):\n    id: str\n    name: str\n    email: str\n    addresses: list[AddressModel] = []\n\n\nclass LookupModelOut(UserModelOut):\n    messages: list[MessageModel] | MessageModel\n\n\n# Instantiating the CRUDRouter, and a lookup for the messages\n# a User is a model that contains a list of embedded addresses and related to multiple messages\naddresses_embed = CRUDEmbed(model=AddressModel, embed_name=\"addresses\")\n\nmessages_lookup = CRUDLookup(\n    model=MessageModel,\n    model_out=LookupModelOut,\n    collection_name=\"messages\",\n    prefix=\"messages\",\n    local_field=\"_id\",\n    foreign_field=\"user_id\",\n)\n\nusers_router = CRUDRouter(\n    model=UserModel,\n    model_out=UserModelOut,\n    db=db,\n    collection_name=\"users\",\n    lookups=[messages_lookup],\n    embeds=[addresses_embed],\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n\n# Instantiating the FastAPI app\napp = FastAPI()\napp.include_router(users_router)\n</code></pre> <p>It will give you the following OpenAPI schema:</p> <p></p>"}]}