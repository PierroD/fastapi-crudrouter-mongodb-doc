{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p> \u26a1 Create CRUD routes with lighting speed \u26a1 <sub>A dynamic FastAPI router that automatically creates CRUD routes for your Mongodb models</sub> </p> <p>Documentation: https://pierrod.github.io/fastapi-crudrouter-mongodb-doc/</p> <p>Source Code: https://github.com/pierrod/fastapi-crudrouter-mongodb</p> <p>Credits :</p> <ul> <li> <p>Base projet and idea : awtkns</p> </li> <li> <p>Convert _id to id (for previous versions of Pydantic) : mclate github guide</p> </li> <li> <p>For Pydantic v2 : Stackoverflow</p> </li> </ul> <p>Are you exhausted from constantly rewriting basic CRUD routes? Do you find yourself needing to swiftly prototype features for presentations or hackathons? Well, rejoice! Introducing  fastapi-crudrouter-mongodb, your ultimate solution.</p> <p>As a complement to FastAPI's APIRouter, the FastAPI CRUDRouter for MongoDB \ud83c\udf31 takes care of the heavy lifting for you. It automatically generates and documents your CRUD routes with minimal effort. Simply provide your model and your database connection, and you're good to go!</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install fastapi-crudrouter-mongodb\n---&gt; 100%\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>I will provide more examples in the future, but for now, here is a basic example of how to use the FastAPI CRUDRouter for Mongodb .</p> <pre><code>from typing import Annotated\nfrom fastapi import FastAPI\nfrom fastapi_crudrouter_mongodb import (\n    ObjectId,\n    MongoObjectId,\n    MongoModel,\n    CRUDRouter,\n)\nimport motor.motor_asyncio\n\n# Database connection using motor\nclient = motor.motor_asyncio.AsyncIOMotorClient(\"mongodb://localhost:27017/local\")\n\n# store the database in a global variable\ndb = client.local\n\n# Database Model\nclass UserModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    name: str\n    email: str\n    password: str\n\n\n# Instantiating the CRUDRouter, and a lookup for the messages\n# a User is a model that contains a list of embedded addresses and related to multiple messages\n\nusers_router = CRUDRouter(\n    model=UserModel,\n    db=db,\n    collection_name=\"users\",\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n\n# Instantiating the FastAPI app\napp = FastAPI()\napp.include_router(users_router)\n</code></pre>"},{"location":"#advanced-usage","title":"Advanced Usage","text":"<p>fastapi-crudrouter-mongodb offers several functionalities designed to maximize the benefits of your auto-generated CRUD routes. Here are some key highlights:</p> <ul> <li>Automatic Lookups </li> <li>Automatic Embeds</li> <li>Ability to provide Custom out schema</li> <li>Ability to Disable specific routes</li> <li>Ability to Add custom dependencies to specific routes</li> </ul>"},{"location":"#openapi-support","title":"OpenAPI Support","text":"<p>Automatic OpenAPI Documentation</p> <p>By default, the CRUDRouter automatically documents all generated routes in accordance with the OpenAPI specification.</p> <p>The default routes generated by the CRUDRouter are displayed in the OpenAPI documentation generated by the system.</p> <p></p> <p>The CRUDRouter can dynamically generate comprehensive documentation based on the provided models.</p> <p></p>"},{"location":"migrate/","title":"Migrate","text":""},{"location":"migrate/#starting-from-version-010-pydantic-v2-is-now-included","title":"Starting from version 0.1.0, Pydantic v2 is now included.","text":"<p>Here's a guide you can follow to migrate your FastAPI-Crudrouter-Mongodb project to ensure compatibility with the latest version of Pydantic.</p>"},{"location":"migrate/#imports","title":"Imports","text":"<p>New imports are now available and may be necessary; these are the most important ones.</p> <pre><code>import motor.motor_asyncio\n\nfrom typing import Optional, Union, Annotated\nfrom fastapi import FastAPI\nfrom fastapi_crudrouter_mongodb import (\n    ObjectId,\n    MongoObjectId,\n    MongoModel,\n    CRUDRouter,\n    CRUDLookup,\n    CRUDEmbed,\n)\n</code></pre>"},{"location":"migrate/#typing","title":"Typing","text":"<p>A lot of type have changed with this update so let's start with it </p> <ul> <li>The ID's :</li> </ul> <pre><code># OLD Version\nclass OLD_Model(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n\n# NEW Version\nclass NEW_Model(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n</code></pre> <ul> <li>The Embeds :</li> </ul> <p>This version change the way Embed are working</p> <pre><code># OLD Version\nclass OLD_Embed_Model(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n    field: str\n\nclass OLD_Main_Model(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n    field: str\n    embeds: Optional[List[OLD_Embed_Model]]\n\n\n# NEW Version\nclass NEW_Embed_Model(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    field: str\n\nclass NEW_Main_Model(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    field: str\n    embeds: Optional[list[NEW_Embed_Model]] = []\n\nnew_embed_router = CRUDEmbed(model=NEW_Embed_Model, embed_name=\"embeds\")\n\nnew_router = CRUDRouter(\n    model=UserModel,\n    db=db,\n    collection_name=\"users\",\n    embeds=[new_embed_router],\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n</code></pre>"},{"location":"models-and-schemas/","title":"Models and Schemas","text":"<p>The CRUDRouter can generate and document your routes based on a <code>MongoModel</code> which is a custom pydantic model passed to it, as well as an output schema representing the JSON result you'll receive.</p> <pre><code>CRUDRouter(\n    model=MyMongoModel,\n    model_out=MyOutputMongoModel, # which is a schema basically\n    ...\n)\n</code></pre> <p>Automatic Output Schema Generation</p> <p>Omitting the output schema argument when initializing your CRUDRouter leads to the router automatically generating and documenting an output schema for your routes. This process involves automatically excluding any fields that match the primary key in the database since they will be generated server-side.</p>"},{"location":"models-and-schemas/#in-model-vs-out-schema","title":"In Model vs Out Schema","text":"<p>The \"in\" model represents the data stored in your database, while the \"out\" schema represents the data you'll receive in response to route calls. This allows you to explicitly exclude fields you wish to keep hidden in the response to your requests.</p> <pre><code>from typing import Annotated\nfrom fastapi_crudrouter_mongodb import (\n    ObjectId,\n    MongoObjectId,\n    MongoModel,\n)\n\n\n# In Model\nclass UserModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    name: str\n    email: str\n    password: str\n\n# Out Model -&gt; Schema\nclass UserModelOut(MongoModel):\n    id: str\n    name: str\n    email: str\n\n# Here, we are excluding the user password from the returned data.\n</code></pre>"},{"location":"releases/","title":"v0.1.0 - Migrate to Pydantic v2 &amp; Refacto","text":"<p>2024-03-31</p>"},{"location":"releases/#breaking-changes","title":"\u26a0\ufe0f Breaking changes","text":"<ul> <li>A lot of the typing has changed due to Pydantic v2</li> <li>The Embed needs to be written explicitly</li> </ul>"},{"location":"releases/#feat","title":"Feat","text":"<ul> <li>Migrate to Pydantic v2</li> <li>Add output schema to the CRUDLookup</li> <li>New CRUDEmbed router </li> </ul>"},{"location":"releases/#fix","title":"Fix","text":"<ul> <li>DELETE Routes will returned the same Schema</li> <li>Remove lookups fields from the parent Schema automatically</li> </ul>"},{"location":"releases/#doc","title":"Doc","text":"<ul> <li>New documentation pages</li> <li>Migration guides available here Migration Guide</li> </ul>"},{"location":"releases/#v008-add-output-schema-to-the-crudrouter","title":"v0.0.8 - Add output schema to the CRUDRouter","text":"<p>2023-09-13</p>"},{"location":"releases/#feat_1","title":"Feat","text":"<ul> <li>Add <code>model_out</code> to the CRUDRouter, gives you the opportunity not to reveal sensitive data</li> <li>Add black to format the code</li> <li>Add ruff to lint the code</li> </ul>"},{"location":"releases/#fix_1","title":"Fix","text":"<ul> <li>fix the <code>convert_to</code> method so it will convert the <code>id</code> to str to prevent issue while converting MongoObjectId to str</li> </ul>"},{"location":"releases/#example","title":"Example","text":"<pre><code>class UserModel(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n    name: str\n    email: str\n    password: str\n    addresses: Optional[List[AddressModel]]\n    messages: Optional[Union[List[MessageModel], MessageModel]] = None\n\n\nclass UserModelOut(MongoModel):\n    id: str\n    name: str\n    email: str\n\nusers_controller = CRUDRouter(\n    model=UserModel,\n    model_out=UserModelOut,\n    db=db,\n    collection_name=\"users\",\n    lookups=[messages_lookup],\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n</code></pre>"},{"location":"releases/#result","title":"Result","text":""},{"location":"releases/#v007-fix-pydantic-to-v1x","title":"v0.0.7 - Fix Pydantic to v1.x","text":"<p>2023-08-13</p>"},{"location":"releases/#fix-pydantic-crashes-and-add-methods","title":"Fix Pydantic crashes and add methods","text":"<ul> <li>Fix : force pydantic v 1.X dependency to prevent the lib from crashes</li> <li>Refactor : refacto <code>mongo</code> and rename it to <code>to_mongo</code></li> <li>Feat : add a new method called <code>convert_to</code> (it helps you to convert a model to another)</li> </ul>"},{"location":"releases/#example_1","title":"Example","text":"<p>Using the convert_to option  <pre><code>@app.get(\"/{id}\", response_model=UserModelDAO)\nasync def root(id: str):\n    response = await db['users'].find_one({'_id': MongoObjectId(id)})\n    userDAO = UserModelDAO.from_mongo(response)\n    userDTO = userDAO.convert_to(UserModelDTO)\n    return userDTO\n</code></pre></p>"},{"location":"releases/#v005-remove-routes-and-add-dependencies","title":"v0.0.5 - Remove routes and add dependencies","text":"<p>2023-05-10</p>"},{"location":"releases/#remove-route-and-add-dependencies-to-a-specific-route","title":"Remove route and add dependencies to a specific route","text":"<ul> <li>Feat : allowed to disable any route of the CRUDRouter</li> <li>Feat : allowed to add custom dependencies to a specific route </li> </ul>"},{"location":"releases/#example_2","title":"Example","text":"<pre><code>user = CRUDRouter(\n    model=UserModel,\n    db=db,\n    collection_name=\"users\",\n    prefix=\"/users\",\n    tags=[\"users\"],\n    disable_get_all=True,\n    dependencies_get_one=[Depends(verify_admin)],\n)\n</code></pre>"},{"location":"releases/#new-crudrouter-params","title":"New CRUDRouter params","text":"Param Name Default Value Type Description Default Behavior disable_get_all False bool Disable get all route Get all route is enable / visible disable_get_one False bool Disable get by id route Get by id route is enable / visible disable_create_one False bool Disable create by id route Create by id route is enable / visible disable_replace_one False bool Disable replace by id route Replace by id route is enable / visible disable_update_one False bool Disable update by id route Update by id route is enable / visible disable_delete_one False bool Disable delete by id route Delete by id route is enable / visible dependencies_get_all None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_get_one None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_create_one None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_replace_one None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_update_one None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_delete_one None Sequence[Depends] Add custom dependencies Default router dependencies"},{"location":"releases/#v004-initial-release","title":"v0.0.4 - Initial Release  :partying_face:  Initial Release :partying_face:","text":"<p>2023-04-10</p> <p></p> <p>Tired of rewriting the same generic CRUD routes? Need to rapidly prototype a feature for a presentation or a hackathon? Thankfully, fastapi-crudrouter-mongodb has your back. As an extension to the APIRouter included with FastAPI, the FastAPI CRUDRouter will automatically generate and document your CRUD routes for you.</p> <p>Documentation: https://pierrod.github.io/fastapi-crudrouter-mongodb-doc/</p> <p>Source Code: https://github.com/pierrod/fastapi-crudrouter-mongodb</p> <p>Credits :</p> <ul> <li> <p>Base projet and idea : awtkns</p> </li> <li> <p>Convert _id to id : mclate github guide</p> </li> </ul>"},{"location":"releases/#installation","title":"Installation","text":"<pre><code>pip install fastapi-crudrouter-mongodb\n</code></pre>"},{"location":"releases/#basic-usage","title":"Basic Usage","text":"<p>I will provide more examples in the future, but for now, here is a basic example of how to use the FastAPI CRUDRouter for Mongodb.</p> <pre><code>from datetime import datetime\nfrom typing import List, Optional, Union\nfrom fastapi import FastAPI\nfrom pydantic import Field\nfrom fastapi_crudrouter_mongodb import CRUDRouter, MongoModel, MongoObjectId, CRUDLookup\nimport motor.motor_asyncio\n\n\n# Database connection using motor\nclient = motor.motor_asyncio.AsyncIOMotorClient(\n    \"mongodb://localhost:27017/local\")\n\ndb = client.local\n\n# Models\nclass MessageModel(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n    message: str\n    user_id: MongoObjectId\n    created_at: Optional[str] = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    updated_at: Optional[str] = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\nclass AddressModel(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n    street: str\n    city: str\n    state: str\n    zip: str\n\nclass UserModel(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n    name: str\n    email: str\n    addresses: Optional[List[AddressModel]]\n    messages: Optional[Union[List[MessageModel], MessageModel]] = None\n\n\n# Instantiating the CRUDRouter, and a lookup for the messages\n# a User is a model that contains a list of embedded addresses and related to multiple messages\nmessages_lookup = CRUDLookup(\n        model=MessageModel,\n        collection_name=\"messages\",\n        prefix=\"messages\",\n        local_field=\"_id\",\n        foreign_field=\"user_id\"\n    )\n\nusers_controller = CRUDRouter(\n    model=UserModel,\n    db=db,\n    collection_name=\"users\",\n    lookups=[messages_lookup],\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n\n# Instantiating the FastAPI app\napp = FastAPI()\napp.include_router(users_controller)\n</code></pre>"},{"location":"releases/#openapi-support","title":"OpenAPI Support","text":"<p>By default, all routes generated by the CRUDRouter will be documented according to OpenAPI spec.</p> <p>Below are the default routes created by the CRUDRouter shown in the generated OpenAPI documentation.</p> <p></p>"},{"location":"routing/","title":"Routing","text":"<p>The main feature of the CRUDRouter is its automatic route generation. Below, we'll discuss how you can prefix, customize, or disable any of the generated routes.</p>"},{"location":"routing/#default-routes","title":"Default Routes","text":"<p>By default, the CRUDRouter will automatically generate the following six routes for you.</p> Route Method Description <code>/</code> <code>GET</code> Get all documents <code>/</code> <code>POST</code> Create a new document <code>/{id}</code> <code>GET</code> Get a document by id <code>/{id}</code> <code>PUT</code> Replace a document by id <code>/{id}</code> <code>PATCH</code> Update a document by id <code>/{id}</code> <code>DELETE</code> Delete a document by id <p>Route URLs</p> <p>Note that the route url is prefixed by the defined prefix.</p> <p>Example: If the CRUDRouter's prefix is configured as \"users\" and I intend to update a particular user, the route I should access is <code>/users/my_user_id</code>, where my_user_id represents the ID of the user.</p>"},{"location":"routing/#prefixes","title":"Prefixes","text":"<p>The route prefix is required and can be configured within the CRUDRouter instance.</p> <pre><code>CRUDRouter(\n    model=MyMongoModel,\n    db=MyDbInstance,\n    collection_name=\"my_collection_name\",\n    prefix=\"/my_prefix\", # &lt;--- right here\n)\n</code></pre>"},{"location":"routing/#disabling-routes","title":"Disabling Routes","text":"<p>In certain situations, you may wish to deactivate a route that has been enabled by default in the CRUDRouter.</p> Param Name Default Value Type Description Default Behavior disable_get_all False bool Disable get all route Get all route is enable / visible disable_get_one False bool Disable get by id route Get by id route is enable / visible disable_create_one False bool Disable create by id route Create by id route is enable / visible disable_replace_one False bool Disable replace by id route Replace by id route is enable / visible disable_update_one False bool Disable update by id route Update by id route is enable / visible disable_delete_one False bool Disable delete by id route Delete by id route is enable / visible <p>Disable a route</p> <p>To disable a route just add this parameter to your route to disable it</p> <pre><code>user = CRUDRouter(\n    model=UserModel,\n    db=db,\n    collection_name=\"users\",\n    prefix=\"/users\",\n    tags=[\"users\"],\n    disable_get_all=True, # &lt;--- Here the 'get_all' route is disable\n)  \n</code></pre>"},{"location":"routing/#add-custom-dependencies-to-a-route","title":"Add Custom Dependencies to a Route","text":"<p>Given the ability to disable certain routes, you may also consider adding custom dependencies to one of them.</p> Param Name Default Value Type Description Default Behavior dependencies_get_all None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_get_one None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_create_one None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_replace_one None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_update_one None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_delete_one None Sequence[Depends] Add custom dependencies Default router dependencies <p>Add custom dependency to a route</p> <p>To disable a route just add this parameter to your route to disable it</p> <pre><code>user = CRUDRouter(\n    model=UserModel,\n    db=db,\n    collection_name=\"users\",\n    prefix=\"/users\",\n    tags=[\"users\"],\n    dependencies_get_one=[Depends(verify_admin)], # &lt;--- Here the 'get_one' route will use your dependency\n)  \n</code></pre>"},{"location":"routing/#overrind-routes","title":"Overrind Routes","text":"<p>While overriding routes is a default capability in FastAPI, it hasn't been implemented yet in the CRUDRouter. Therefore, you may require some additional configuration to override a default route.</p> <p>Routes in the CRUDRouter can be overridden by using the standard fastapi route decorators. These include:</p> <ul> <li><code>@router.get(path: str, *args, **kwargs)</code></li> <li><code>@router.post(path: str, *args, **kwargs)</code></li> <li><code>@router.put(path: str, *args, **kwargs)</code></li> <li><code>@router.delete(path: str, *args, **kwargs)</code></li> <li><code>@router.api_route(path: str, methods: List[str] = ['GET'], *args, **kwargs)</code></li> </ul> <p>Tip</p> <p>All routes within the CRUDRouter are subclasses of FastAPI's APIRouter, allowing for extensive customization to suit your needs.</p>"},{"location":"routing/#overriding-example","title":"Overriding Example","text":"<p>Here's an example where we override the routes for /users when using the CRUDRouter.</p> <pre><code>from typing import Annotated\nfrom fastapi import FastAPI\nfrom fastapi_crudrouter_mongodb import (\n    ObjectId,\n    MongoObjectId,\n    MongoModel,\n    CRUDRouter,\n)\nimport motor.motor_asyncio\n\n# Database connection using motor\nclient = motor.motor_asyncio.AsyncIOMotorClient(\"mongodb://localhost:27017/local\")\n\n# store the database in a global variable\ndb = client.local\n\n# Database Model\nclass UserModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    name: str\n    email: str\n    password: str\n\n\n# Instantiating the CRUDRouter, and a lookup for the messages\n# a User is a model that contains a list of embedded addresses and related to multiple messages\n\nusers_router = CRUDRouter(\n    model=UserModel,\n    db=db,\n    collection_name=\"users\",\n    prefix=\"/users\",\n    disable_get_all=True, # &lt;--- disabling the route is needed to override it\n    tags=[\"users\"],\n)\n\n@users_router.get('/') # you can add a '/' to make it iso to the previous one's\ndef overrides_get_all():\n    return \"My overrided route that returns all the users\"\n\n# Instantiating the FastAPI app\napp = FastAPI()\napp.include_router(users_router)\n</code></pre>"},{"location":"examples/minimalist/","title":"Minimalist","text":"<p>This is a minimalist example of a FastAPI application build with FastAPI CRUDRouter for Mongodb .</p> <p>I'm working on differents examples, with some custom router besides the CRUDRouter, and I will add them to the documentation soon .</p> <pre><code>from datetime import datetime\nfrom typing import Optional, Union, Annotated\nfrom fastapi import FastAPI\nfrom fastapi_crudrouter_mongodb import (\n    ObjectId,\n    MongoObjectId,\n    MongoModel,\n    CRUDRouter,\n    CRUDLookup,\n    CRUDEmbed,\n)\nimport motor.motor_asyncio\n\n\n# Database connection using motor\nclient = motor.motor_asyncio.AsyncIOMotorClient(\"mongodb://localhost:27017/local\")\n\n# store the database in a global variable\ndb = client.local\n\n\n# Database Model\nclass MessageModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    message: str\n    user_id: Annotated[ObjectId, MongoObjectId]\n    created_at: str | None = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    updated_at: str | None = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n\nclass AddressModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    street: str\n    city: str\n    state: str\n    zip: str\n\n\nclass UserModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    name: str\n    email: str\n    password: str\n    addresses: Optional[list[AddressModel]] = []\n    messages: Optional[Union[list[MessageModel], MessageModel]] = None\n\n# Model Out -&gt; Schema\nclass UserModelOut(MongoModel):\n    id: str\n    name: str\n    email: str\n    addresses: list[AddressModel] = []\n\n\nclass LookupModelOut(UserModelOut):\n    messages: list[MessageModel] | MessageModel\n\n\n# Instantiating the CRUDRouter, and a lookup for the messages\n# a User is a model that contains a list of embedded addresses and related to multiple messages\naddresses_embed = CRUDEmbed(model=AddressModel, embed_name=\"addresses\")\n\nmessages_lookup = CRUDLookup(\n    model=MessageModel,\n    model_out=LookupModelOut,\n    collection_name=\"messages\",\n    prefix=\"messages\",\n    local_field=\"_id\",\n    foreign_field=\"user_id\",\n)\n\nusers_router = CRUDRouter(\n    model=UserModel,\n    model_out=UserModelOut,\n    db=db,\n    collection_name=\"users\",\n    lookups=[messages_lookup],\n    embeds=[addresses_embed],\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n\n# Instantiating the FastAPI app\napp = FastAPI()\napp.include_router(users_router)\n</code></pre> <p>It will give you the following OpenAPI schema:</p> <p></p>"},{"location":"models/DeletedModelOut/","title":"DeletedModelOut","text":"<p>This model has been created to return the id of the deleted document in the database</p> <pre><code>from .mongo_model import MongoModel\n\nclass DeletedModelOut(MongoModel):\n    id: str\n</code></pre> <p>The result of a DELETE request</p> <pre><code>{\n    \"id\": \"66094bbb5d477c1e95410be6\"\n}\n</code></pre>"},{"location":"models/MongoModel/","title":"MongoModel","text":"<p>The MongoModel, one of the core classes in this package, serves as a Pydantic model that extends Pydantic's BaseModel with additional fields. This model is instrumental in defining the structure of MongoDB documents and generating the OpenAPI schema for your routes.</p> <p>Being a Pydantic model, the MongoModel inherits all functionalities of Pydantic models, including the use of the Pydantic Field class for defining model fields. However, the MongoModel introduces several supplementary fields to the Pydantic model.</p> <p>To utilize the MongoModel, you can import it from the fastapi_crudrouter_mongodb package. This grants access to all methods available in Pydantic models as well as those specific to the MongoModel, which will be outlined below.</p> Method Description State from_mongo Transform a MongoDB object to a python dict (as a MongoModel) OK mongo Convert a MongoModel object to a dict Deprecated to_mongo Same as mongo but with better naming OK convert_to Gives you the oportunity to convert a MongoModel to any other Pydantic dict or MongoModel Ok <p>The MongoModel validate the following field in the Pydantic model</p> <pre><code>    id: Annotated[ObjectId, MongoObjectId] | None = None\n</code></pre> <p>The id field is an optional field that is used to store the id of the document in the database. It is an instance of the MongoObjectId class, which is a subclass of the <code>bson</code> ObjectId class. The id field is automatically generated by the database when you create a new document.</p> <p>It will be automatically translated to an \"_id\" in MongoDB, and returned as \"id\" in the response to match the RESTfull specifications.</p> <p>Make sure to build your model like below</p> <pre><code>class MyModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    my_field: str\n</code></pre> <p>Further details are available in the following links.</p> <ul> <li>For Pydantic v1.x : Github</li> <li>For Pydantic v2.x : Stackoverflow</li> </ul>"},{"location":"models/MongoObjectId/","title":"MongoObjectId","text":"<p>The MongoObjectId is a subclass of the <code>bson</code> ObjectId class. It is used to define the id field of your MongoModel. It is also used to generate the OpenAPI schema for your routes.</p> <p>The only goal behing it, is to make it work like it should be used by MongoDb .</p> <p>Use MongoObjectId as type hint for your id field</p> <pre><code>...\nclass MyModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n</code></pre> <p>You can also use it as a foreign field for your embed or lookup models.</p> <p>Use MongoObjectId as type hint for your foreign fields</p> <p><pre><code>...\nclass MyModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    user_id: Annotated[ObjectId, MongoObjectId]\n</code></pre> The optional field is mainly used to let the field being generated by the database, but in a lookup case it have to be defined so it shouldn't be Optional.</p>"},{"location":"routers/CRUDEmbed/","title":"CRUDEmbed","text":"<p>The latest addition to the CRUDRouter is the CRUDEmbed feature. It enables you to nest a model within another model, akin to a lookup but with distinct functionality. CRUDEmbed is utilized for storing a list of elements within your primary model in the collection, resembling a one-to-many relationship.</p> <p>How to use it ?</p> <p>Unlike previous version the <code>embed</code> will not be detected automatically You will need to write it explicitly </p> <pre><code>...\n# Embed model\nclass AddressModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    street: str\n    zip_code: str\n\n# Parent model\nclass UserModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    name: str\n    addresses: Optional[list[AddressModel]] = [] # define explicitly that this field will be an embed\n\n# define the CRUDEmbed class\naddresses_embed = CRUDEmbed(model=AddressModel, embed_name=\"addresses\")\n# add it to the CRUDRouter\nusers_router = CRUDRouter(\nmodel=UserModel,\ndb=db,\ncollection_name=\"users\",\nembeds=[addresses_embed],\nprefix=\"/users\",\ntags=[\"users\"],\n)\n</code></pre>"},{"location":"routers/CRUDEmbed/#output-schema","title":"Output Schema","text":"<p>You may wish to include the embed in the output schema of the base model.</p> <p>Here is how you can achieve it</p> <pre><code># Model Out -&gt; Schema\nclass UserModelOut(MongoModel):\n    id: str\n    name: str\n    addresses: list[AddressModel] = [] # This is our embed list \n</code></pre>"},{"location":"routers/CRUDEmbed/#routes","title":"Routes","text":"<p>The CRUDRouter will automatically add the following routes to the parent model :</p> Route Method Description <code>/embeds</code> <code>GET</code> Get all documents <code>/embeds</code> <code>POST</code> Create a new document <code>/embeds/{id}</code> <code>GET</code> Get a document by id <code>/embeds/{id}</code> <code>PUT</code> Update a document by id <code>/embeds/{id}</code> <code>DELETE</code> Delete a document by id"},{"location":"routers/CRUDEmbed/#openapi-result","title":"OpenAPI Result","text":"<p>But it will also add the routes above to the embed model OpenAPI schema.</p> <p></p>"},{"location":"routers/CRUDLookup/","title":"CRUDLookup","text":"<p>The CRUDLookup wasn't easy to implement, but it is now working like a charm  (or kinda actually, I'm not really satisfied on how it's working).</p> <p>You can't define your 'lookup' relation directly inside your model, and I'm really sorry about that, but it's the only way I found to make it work for the moment.</p> <p>I'm still working on it, and I hope to find a better way to do it, but for now, it's working .</p> <p>How to use it ?</p> <p>The parent model should have a field with an <code>Union</code> type, which means that it should look like below :</p> <pre><code># Parent\nclass ParentModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    childs: Optional[Union[list[ChildModel], ChildModel]] = None\n\n# Child\nclass ChildModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    parent_id: Annotated[ObjectId, MongoObjectId]\n</code></pre> <p>Then, you can define your lookup like this :</p> <pre><code>from fastapi_crudrouter_mongodb import (\n    ObjectId,\n    MongoObjectId,\n    MongoModel,\n    CRUDRouter,\n    CRUDLookup)\n\n# Define your lookup\nchild_lookup = CRUDLookup(\n    model=ChildModel,\n    collection_name=\"childrens\",\n    prefix=\"childrens\",\n    local_field=\"_id\",\n    foreign_field=\"parent_id\"\n)\n\n# Then, you can use it in your CRUDRouter\nparent_controller = CRUDRouter(\n    model=ParentModel,\n    db=db,\n    collection_name=\"parents\",\n    lookups=[child_lookup],\n    prefix=\"/parents\",\n    tags=[\"parents\"],\n)\n</code></pre> <p>The type should look like above because if you want to use the following route : <code>/parents/{id}/childrens/{id}</code> , it will return the child item as an object an not a list.</p>"},{"location":"routers/CRUDLookup/#output-schemas","title":"Output Schemas","text":"<p>If you've perused the CRUDRouter documentation, you may have observed the option to utilize an output schema in response to your API requests. I've extended this capability to CRUDLookups as well in version 0.1.0. \u2728</p> <p>How to use output schema ?</p> <p>In this example, both the parent and the child have an output schema. As illustrated, the child utilizes the parent's output schema as a foundation.</p> <pre><code>    # Database Model\n    class MessageModel(MongoModel):\n        id: Annotated[ObjectId, MongoObjectId] | None = None\n        message: str\n        user_id: Annotated[ObjectId, MongoObjectId]\n        created_at: str | None = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n        updated_at: str | None = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\n    class UserModel(MongoModel):\n        id: Annotated[ObjectId, MongoObjectId] | None = None\n        name: str\n        email: str\n        password: str\n        addresses: Optional[list[AddressModel]] = []\n        messages: Optional[Union[list[MessageModel], MessageModel]] = None\n\n    # Model Out -&gt; Schema\n    class UserModelOut(MongoModel):\n        id: str\n        name: str\n        email: str\n        addresses: list[AddressModel] = []\n\n\n    class LookupModelOut(UserModelOut):\n        messages: list[MessageModel] | MessageModel\n\n\n    messages_lookup = CRUDLookup(\n    model=MessageModel,\n    model_out=LookupModelOut,\n    collection_name=\"messages\",\n    prefix=\"messages\",\n    local_field=\"_id\",\n    foreign_field=\"user_id\",\n    )\n\n    users_router = CRUDRouter(\n        model=UserModel,\n        model_out=UserModelOut,\n        db=db,\n        collection_name=\"users\",\n        lookups=[messages_lookup],\n        prefix=\"/users\",\n        tags=[\"users\"],\n    )\n</code></pre>"},{"location":"routers/CRUDLookup/#routes","title":"Routes","text":"<p>The CRUDRouter will automatically build the following routes :</p> Route Method Description <code>/parents</code> <code>GET</code> Get all documents <code>/parents</code> <code>POST</code> Create a new document <code>/parents/{id}</code> <code>GET</code> Get a document by id <code>/parents/{id}</code> <code>PUT</code> Update a document by id <code>/parents/{id}</code> <code>DELETE</code> Delete a document by id <code>/parents/{id}/childrens</code> <code>GET</code> Get all childrens of a parent <code>/parents/{id}/childrens/{lookup_id}</code> <code>GET</code> Get a child of a parent by id <code>/parents/{id}/childrens</code> <code>POST</code> Create a new child document <code>/parents/{id}/childrens/{lookup_id}</code> <code>PUT</code> Replace a child document by id and lookup_id <code>/parents/{id}/childrens/{lookup_id}</code> <code>PATCH</code> Update a child document by id and lookup_id <code>/parents/{id}/childrens/{lookup_id}</code> <code>DELETE</code> Delete a document by id <p>If you want to respect the RESTfull</p> <p>Make sure to add an <code>s</code> to the end of prefix, so that the route will be <code>/childrens</code> instead of <code>/children</code> (which is not correct, I know, but you see the point here ).</p>"},{"location":"routers/CRUDLookup/#openapi-result","title":"OpenAPI Result","text":"<p>The CRUDRouter will also generate the OpenAPI schema for you, and document the routes for you.</p> <p></p> <p>If you are looking for a way to make the CRUDRouter work with an <code>embed</code> model, don't worry I got your back .</p> <p>https://pierrod.github.io/fastapi-crudrouter-mongodb-doc/features/CRUDEmbed/</p>"},{"location":"routers/CRUDRouter/","title":"CRUDRouter","text":"<p>The CRUDRouter is able to generate and document your routes based on the mongo model you pass to it.</p> <pre><code>CRUDRouter(\n    model=MyMongoModel,\n    db=MyDbInstance,\n    collection_name=\"my_collection_name\",\n    prefix=\"/my_prefix\",\n)\n</code></pre>"},{"location":"routers/CRUDRouter/#define-an-output-schema","title":"Define an Output Schema","text":"<p>The \"in\" model represents the data stored in your database, while the \"out\" schema represents the data you'll receive in response to route calls. This allows you to explicitly exclude fields you wish to keep hidden in the response to your requests.</p> <p>How to use it ?</p> <pre><code>from typing import Annotated\nfrom fastapi_crudrouter_mongodb import (\n    ObjectId,\n    MongoObjectId,\n    MongoModel,\n)\n\n\n# In Model\nclass UserModel(MongoModel):\n    id: Annotated[ObjectId, MongoObjectId] | None = None\n    name: str\n    email: str\n    password: str\n\n# Out Model -&gt; Schema\nclass UserModelOut(MongoModel):\n    id: str\n    name: str\n    email: str\n\n# Here, we are excluding the user password from the returned data.\n</code></pre> <p>As the CRUDRouter herits from the APIRouter, you can pass all the parameters you would pass to the APIRouter, such as <code>prefix</code>, <code>tags</code>, <code>dependencies</code> etc.</p>"},{"location":"routers/CRUDRouter/#generated-routes","title":"Generated Routes","text":"<p>The CRUDRouter will generate the following routes for you:</p> Route Method Description <code>/my_prefix</code> <code>GET</code> Get all documents <code>/my_prefix</code> <code>POST</code> Create a new document <code>/my_prefix/{id}</code> <code>GET</code> Get a document by id <code>/my_prefix/{id}</code> <code>PUT</code> Replace a document by id <code>/my_prefix/{id}</code> <code>PATCH</code> Update a document by id <code>/my_prefix/{id}</code> <code>DELETE</code> Delete a document by id <p>If you want to respect the RESTfull</p> <p>Make sure to add an <code>s</code> to the end of prefix, so that the route will be <code>/my_prefixes</code> instead of <code>/my_prefix</code>.</p> <p>You have the possibility to add some custom dependencies to your routes, and you can also disable some router's routes, see all the parameters bellow :</p>"},{"location":"routers/CRUDRouter/#disable-routes-dependencies","title":"Disable routes &amp; Dependencies","text":"Param Name Default Value Type Description Default Behavior disable_get_all False bool Disable get all route Get all route is enable / visible disable_get_one False bool Disable get by id route Get by id route is enable / visible disable_create_one False bool Disable create by id route Create by id route is enable / visible disable_replace_one False bool Disable replace by id route Replace by id route is enable / visible disable_update_one False bool Disable update by id route Update by id route is enable / visible disable_delete_one False bool Disable delete by id route Delete by id route is enable / visible dependencies_get_all None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_get_one None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_create_one None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_replace_one None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_update_one None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_delete_one None Sequence[Depends] Add custom dependencies Default router dependencies"},{"location":"routers/CRUDRouter/#openapi-result","title":"OpenAPI Result","text":"<p>The CRUDRouter will also generate the OpenAPI schema for you, and document the routes for you.</p> <p></p>"},{"location":"routers/CRUDRouter/#looking-for-something-else","title":"Looking for something else ?","text":"<p>You might want to do some relational stuff in your fastapi app, and you might want to use the CRUDRouter to generate your routes. Insane news, the CRUDRouter is able to generate routes for you based on your mongo model, and it is able to generate the OpenAPI schema for you.</p> <p>Lookups</p> <p>You will find more information about the CRUDLookup in the following page.</p> <p>CRUDLookup</p> <p>Embeds</p> <p>If you aren't looking for the \"lookup\" stuff, but for a way to use an embed model, you can find more information about the CRUDEmbed in the following page.</p> <p>CRUDEmbed</p>"}]}