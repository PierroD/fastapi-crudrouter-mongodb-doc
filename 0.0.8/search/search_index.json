{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Overview","text":"<p> \u26a1 Create CRUD routes with lighting speed \u26a1 <sub>A dynamic FastAPI router that automatically creates CRUD routes for your Mongodb models</sub> </p> <p>Documentation: https://pierrod.github.io/fastapi-crudrouter-mongodb-doc/</p> <p>Source Code: https://github.com/pierrod/fastapi-crudrouter-mongodb</p> <p>Credits :</p> <ul> <li> <p>Base projet and idea : awtkns</p> </li> <li> <p>Convert _id to id : mclate github guide</p> </li> </ul> <p>Tired of rewriting generic CRUD routes? Need to rapidly prototype a feature for a presentation or a hackathon? Thankfully, fastapi-crudrouter-mongodb has your back.</p> <p>As an extension to the APIRouter included with FastAPI, the FastAPI CRUDRouter for Mongodb  will automatically generate and document your CRUD routes for you, all you have to do is pass your model and maybe your database connection.</p>"},{"location":"#installation","title":"Installation","text":"<pre><code>$ pip install fastapi-crudrouter-mongodb\n---&gt; 100%\n</code></pre>"},{"location":"#basic-usage","title":"Basic Usage","text":"<p>I will provide more examples in the future, but for now, here is a basic example of how to use the FastAPI CRUDRouter for Mongodb .</p> <pre><code>from datetime import datetime\nfrom typing import List, Optional, Union\nfrom fastapi import FastAPI\nfrom pydantic import Field\nfrom fastapi_crudrouter_mongodb import CRUDRouter, MongoModel, MongoObjectId, CRUDLookup\nimport motor.motor_asyncio\n\n\n# Database connection using motor\nclient = motor.motor_asyncio.AsyncIOMotorClient(\n    \"mongodb://localhost:27017/local\")\n\ndb = client.local\n\n# Models\nclass MessageModel(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n    message: str\n    user_id: MongoObjectId\n    created_at: Optional[str] = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    updated_at: Optional[str] = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\nclass AddressModel(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n    street: str\n    city: str\n    state: str\n    zip: str\n\nclass UserModel(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n    name: str\n    email: str\n    addresses: Optional[List[AddressModel]]\n    messages: Optional[Union[List[MessageModel], MessageModel]] = None\n\n\n# Instantiating the CRUDRouter, and a lookup for the messages\n# a User is a model that contains a list of embedded addresses and related to multiple messages\nmessages_lookup = CRUDLookup(\n        model=MessageModel,\n        collection_name=\"messages\",\n        prefix=\"messages\",\n        local_field=\"_id\",\n        foreign_field=\"user_id\"\n    )\n\nusers_controller = CRUDRouter(\n    model=UserModel,\n    db=db,\n    collection_name=\"users\",\n    lookups=[messages_lookup],\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n\n# Instantiating the FastAPI app\napp = FastAPI()\napp.include_router(users_controller)\n</code></pre>"},{"location":"#openapi-support","title":"OpenAPI Support","text":"<p>By default, all routes generated by the CRUDRouter will be documented according to OpenAPI spec.</p> <p>Below are the default routes created by the CRUDRouter shown in the generated OpenAPI documentation.</p> <p></p>"},{"location":"examples/minimalist/","title":"Minimalist","text":"<p>This is a minimalist example of a FastAPI application build with FastAPI CRUDRouter for Mongodb .</p> <p>I'm working on differents examples, with some custom router besides the CRUDRouter, and I will add them to the documentation soon .</p> <pre><code>from datetime import datetime\nfrom typing import List, Optional, Union\nfrom fastapi import FastAPI\nfrom pydantic import Field\nfrom fastapi_crudrouter_mongodb import CRUDRouter, MongoModel, MongoObjectId, CRUDLookup\nimport motor.motor_asyncio\n\n\n# Database connection using motor\nclient = motor.motor_asyncio.AsyncIOMotorClient(\n    \"mongodb://localhost:27017/local\")\n\ndb = client.local\n\n# Models\nclass MessageModel(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n    message: str\n    user_id: MongoObjectId\n    created_at: Optional[str] = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n    updated_at: Optional[str] = datetime.now().strftime(\"%Y-%m-%d %H:%M:%S\")\n\nclass AddressModel(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n    street: str\n    city: str\n    state: str\n    zip: str\n\nclass UserModel(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n    name: str\n    email: str\n    addresses: Optional[List[AddressModel]]\n    messages: Optional[Union[List[MessageModel], MessageModel]] = None\n\n\n# Instantiating the CRUDRouter, and a lookup for the messages\n# a User is a model that contains a list of embedded addresses and related to multiple messages\nmessages_lookup = CRUDLookup(\n        model=MessageModel,\n        collection_name=\"messages\",\n        prefix=\"messages\",\n        local_field=\"_id\",\n        foreign_field=\"user_id\"\n    )\n\nusers_controller = CRUDRouter(\n    model=UserModel,\n    db=db,\n    collection_name=\"users\",\n    lookups=[messages_lookup],\n    prefix=\"/users\",\n    tags=[\"users\"],\n)\n\n# Instantiating the FastAPI app\napp = FastAPI()\napp.include_router(users_controller)\n</code></pre> <p>It will give you the following OpenAPI schema:</p> <p></p>"},{"location":"features/CRUDEmbed/","title":"CRUDEmbed","text":"<p>The CRUDEmbed is the latest element I added to the CRUDRouter. It allows you to embed a model in another model. It's a bit like the lookup, but it's not the same. It's used to store a list of element inside your first model into the collection. It's a bit like a one-to-many relation.</p> <p>I'm currently working on adding the Update and Replace methods to the CRUDEmbed, and I'm also working on the documentation. I hope to be able to release a new version soon .</p> <p>The Delete method is available but also kinda different from the rest in it returns.</p> <p>How to use it ?</p> <p>CRUDRouter will detect that a field is a list of MongoModel and use it to build an embed around it.</p> <pre><code>...\nclass MyModel(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n    embeds: Optional[List[EmbedModel]]\n</code></pre> <p>The prefix of the CRUD routes will be the name of the field, in this case, it will be <code>embeds</code>.</p> <p>The CRUDRouter will automatically add the following routes to the parent model :</p> Route Method Description <code>/embeds</code> <code>GET</code> Get all documents <code>/embeds</code> <code>POST</code> Create a new document <code>/embeds/{id}</code> <code>GET</code> Get a document by id <code>/embeds/{id}</code> <code>PUT</code> Update a document by id <code>/embeds/{id}</code> <code>DELETE</code> Delete a document by id <p>But it will also add the routes above to the embed model OpenAPI schema.</p> <p></p>"},{"location":"features/CRUDLookup/","title":"CRUDLookup","text":"<p>The CRUDLookup wasn't easy to implement, but it is now working like a charm  (or kinda actually, I'm not really satisfied on how it's working).</p> <p>You can't define your 'lookup' relation directly inside your model, and I'm really sorry about that, but it's the only way I found to make it work for the moment.</p> <p>I'm still working on it, and I hope to find a better way to do it, but for now, it's working .</p> <p>How to use it ?</p> <p>The parent model should have a field with an <code>Union</code> type, which means that it should look like below :</p> <pre><code># Parent\nclass ParentModel(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n    childs: Optional[Union[List[ChildModel], ChildModel]] = None\n\n# Child\nclass ChildModel(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n    parent_id: MongoObjectId\n</code></pre> <p>Then, you can define your lookup like this :</p> <pre><code>from fastapi_crudrouter_mongodb import CRUDLookup\n\n# Define your lookup\nchild_lookup = CRUDLookup(\n    model=ChildModel,\n    collection_name=\"childrens\",\n    prefix=\"childrens\",\n    local_field=\"_id\",\n    foreign_field=\"parent_id\"\n)\n\n# Then, you can use it in your CRUDRouter\nparent_controller = CRUDRouter(\n    model=ParentModel,\n    db=db,\n    collection_name=\"parents\",\n    lookups=[child_lookup],\n    prefix=\"/parents\",\n    tags=[\"parents\"],\n)\n</code></pre> <p>The type should look like above because if you want to use the following route : <code>/parents/{id}/childrens/{id}</code> , it will return the child item as an object an not a list.</p> <p>The CRUDRouter will automatically build the following routes :</p> Route Method Description <code>/parents</code> <code>GET</code> Get all documents <code>/parents</code> <code>POST</code> Create a new document <code>/parents/{id}</code> <code>GET</code> Get a document by id <code>/parents/{id}</code> <code>PUT</code> Update a document by id <code>/parents/{id}</code> <code>DELETE</code> Delete a document by id <code>/parents/{id}/childrens</code> <code>GET</code> Get all childrens of a parent <code>/parents/{id}/childrens/{lookup_id}</code> <code>GET</code> Get a child of a parent by id <code>/parents/{id}/childrens</code> <code>POST</code> Create a new child document <code>/parents/{id}/childrens/{lookup_id}</code> <code>PUT</code> Replace a child document by id and lookup_id <code>/parents/{id}/childrens/{lookup_id}</code> <code>PATCH</code> Update a child document by id and lookup_id <code>/parents/{id}/childrens/{lookup_id}</code> <code>DELETE</code> Delete a document by id <p>If you want to respect the RESTfull</p> <p>Make sure to add an <code>s</code> to the end of prefix, so that the route will be <code>/childrens</code> instead of <code>/children</code> (which is not correct, I know, but you see the point here ).</p> <p>The CRUDRouter will also generate the OpenAPI schema for you, and document the routes for you.</p> <p></p> <p>If you are looking for a way to make the CRUDRouter work with an <code>embed</code> model, don't worry I got your back .</p> <p>https://pierrod.github.io/fastapi-crudrouter-mongodb-doc/features/CRUDEmbed/</p>"},{"location":"features/CRUDRouter/","title":"CRUDRouter","text":"<p>The CRUDRouter is able to generate and document your routes based on the mongo model you pass to it.</p> <pre><code>CRUDRouter(\n    model=MyMongoModel,\n    db=MyDbInstance,\n    collection_name=\"my_collection_name\",\n    lookups=[MyFirstLookup, MySecondLookup],\n    prefix=\"/my_prefix\",\n)\n</code></pre> <p>As the CRUDRouter herits from the APIRouter, you can pass all the parameters you would pass to the APIRouter, such as <code>prefix</code>, <code>tags</code>, <code>dependencies</code> etc.</p> <p>The CRUDRouter will generate the following routes for you:</p> Route Method Description <code>/my_prefix</code> <code>GET</code> Get all documents <code>/my_prefix</code> <code>POST</code> Create a new document <code>/my_prefix/{id}</code> <code>GET</code> Get a document by id <code>/my_prefix/{id}</code> <code>PUT</code> Replace a document by id <code>/my_prefix/{id}</code> <code>PATCH</code> Update a document by id <code>/my_prefix/{id}</code> <code>DELETE</code> Delete a document by id <p>If you want to respect the RESTfull</p> <p>Make sure to add an <code>s</code> to the end of prefix, so that the route will be <code>/my_prefixes</code> instead of <code>/my_prefix</code>.</p> <p>You have the possibility to add some custom dependencies to your routes, and you can also disable some router's routes, see all the parameters bellow :</p> Param Name Default Value Type Description Default Behavior disable_get_all False bool Disable get all route Get all route is enable / visible disable_get_one False bool Disable get by id route Get by id route is enable / visible disable_create_one False bool Disable create by id route Create by id route is enable / visible disable_replace_one False bool Disable replace by id route Replace by id route is enable / visible disable_update_one False bool Disable update by id route Update by id route is enable / visible disable_delete_one False bool Disable delete by id route Delete by id route is enable / visible dependencies_get_all None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_get_one None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_create_one None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_replace_one None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_update_one None Sequence[Depends] Add custom dependencies Default router dependencies dependencies_delete_one None Sequence[Depends] Add custom dependencies Default router dependencies <p>The CRUDRouter will also generate the OpenAPI schema for you, and document the routes for you.</p> <p></p> <p>You might want to do some relational stuff in your fastapi app, and you might want to use the CRUDRouter to generate your routes. Insane news, the CRUDRouter is able to generate routes for you based on your mongo model, and it is able to generate the OpenAPI schema for you.</p> <p>You will find more information about the CRUDRouter in the following page.</p> <p>https://pierrod.github.io/fastapi-crudrouter-mongodb-doc/features/CRUDLookup/</p> <p>If you aren't looking for the \"lookup\" stuff, but for a way to use an embed model, you can find more information about the CRUDEmbed in the following page.</p> <p>https://pierrod.github.io/fastapi-crudrouter-mongodb-doc/features/CRUDEmbed/</p>"},{"location":"features/MongoModel/","title":"MongoModel","text":"<p>The MongoModel is one of the two main classes of this package. It is a Pydantic model that inherits from the Pydantic BaseModel and adds a few extra fields to it. The MongoModel is used to define the structure of your mongo documents. It is also used to generate the OpenAPI schema for your routes.</p> <p>The MongoModel is a Pydantic model, so you can use all the features of Pydantic models. You can also use the Pydantic Field class to define the fields of your model. The MongoModel adds a few extra fields to the Pydantic model.</p> <p>You are able to import the MongoModel from the fastapi_crudrouter_mongodb package. You can use all the methods of the Pydantic model, but also the methods of the MongoModel which are described below.</p> Method Description State from_mongo Transform a MongoDB object to a python dict (as a MongoModel) OK mongo Convert a MongoModel object to a dict Deprecated to_mongo Same as mongo but with better naming OK convert_to Gives you the oportunity to convert a MongoModel to any other Pydantic dict or MongoModel Ok <p>The MongoModel adds the following fields to the Pydantic model</p> <pre><code>id: Optional[MongoObjectId] = Field()\n</code></pre> <p>The id field is an optional field that is used to store the id of the document in the database. It is an instance of the MongoObjectId class, which is a subclass of the Pydantic ObjectId class. The id field is automatically generated by the database when you create a new document.</p> <p>It will be automatically translated to an \"_id\" in MongoDB, and returned as \"id\" in the response to match the RESTfull specifications.</p> <p>Make sure to build your model like below</p> <pre><code>class MyModel(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n    my_field: str\n</code></pre> <p>More infos could be found in the following github issue</p> <p>https://github.com/tiangolo/fastapi/issues/1515</p>"},{"location":"features/MongoObjectId/","title":"MongoObjectId","text":"<p>The MongoObjectId is a subclass of the Pydantic ObjectId class. It is used to define the id field of your MongoModel. It is also used to generate the OpenAPI schema for your routes.</p> <p>The only goal behing it, is to make it work like it should be used by MongoDb .</p> <p>Use MongoObjectId as type hint for your id field</p> <pre><code>...\nclass MyModel(MongoModel):\n    id: Optional[MongoObjectId] = Field()\n</code></pre> <p>You can also use it as a foreign field for your embed or lookup models.</p> <p>Use MongoObjectId as type hint for your foreign fields</p> <p><pre><code>...\nclass MyModel(MongoModel):\n    id: Optional[MongoObjectId] = Field() \n    lookup_id: MongoObjectId \n</code></pre> The optional field is mainly used to let the field being generated by the database, but in a lookup case it have to be defined so it shouldn't be Optional.</p>"}]}